// Prisma スキーマファイル
// ドキュメント: https://pris.ly/d/prisma-schema

// Prisma クライアント生成設定
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// データベース接続設定（PostgreSQL使用）
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================
// ユーザーモデル
// ====================
model User {
  id            String       @id @default(cuid()) // ユーザーID（主キー）
  name          String       // ユーザー名
  email         String       @unique // メールアドレス（ユニーク）
  password      String       // パスワード
  role          String       // 権限・役割
  created_at    DateTime     @default(now()) // 作成日時
  updated_at    DateTime     @updatedAt      // 更新日時

  driving_logs  DrivingLog[] // ユーザーが記録した運転日誌（1対多リレーション）
  reservations  Reservation[] // ユーザーが行った予約（1対多リレーション）
}

// ====================
// 車両モデル
// ====================
model Vehicle {
  id                String        @id @default(cuid()) // 車両ID（主キー）
  license_plate     String        @unique // ナンバープレート（ユニーク）
  make              String        // メーカー
  model             String        // モデル
  year              Int           // 年式
  status            VehicleStatus // 車両の状態（AVAILABLE/IN_USE/MAINTENANCE）
  next_inspection   DateTime      // 次回点検日
  icon              String        // アイコン名やパス
  icon_color_from   String        // アイコングラデーション開始色
  icon_color_to     String        // アイコングラデーション終了色
  created_at        DateTime      @default(now()) // 作成日時
  updated_at        DateTime      @updatedAt      // 更新日時

  driving_logs      DrivingLog[]  // この車両の運転日誌（1対多リレーション）
  reservations      Reservation[] // この車両の予約（1対多リレーション）

  @@map("vehicles") // テーブル名をスネークケースにマッピング
}

// ====================
// 車両の状態を表す列挙型
// ====================
enum VehicleStatus {
  AVAILABLE   // 利用可能
  IN_USE      // 使用中
  MAINTENANCE // 点検中
}

// ====================
// 運転日誌モデル
// ====================
model DrivingLog {
  id            String    @id @default(cuid()) // 運転日誌ID（主キー）
  start_time    DateTime  // 運転開始時刻
  end_time      DateTime? // 運転終了時刻（任意）
  start_meter   Int?      // 開始時メーター（任意）
  end_meter     Int?      // 終了時メーター（任意）
  destination   String?   // 行き先（任意）
  is_refueling  Boolean   @default(false) // 給油有無
  notes         String?   // 備考（任意）
  created_at    DateTime  @default(now()) // 作成日時
  updated_at    DateTime  @updatedAt      // 更新日時

  // 車両リレーション
  vehicle       Vehicle   @relation(fields: [vehicle_id], references: [id])
  vehicle_id    String    // 車両ID（外部キー）

  // ユーザーリレーション
  user_id       String    // ユーザーID（外部キー）
  user          User      @relation(fields: [user_id], references: [id])

  // 予約との連携（任意）
  reservation   Reservation?

  @@map("driving_logs") // テーブル名をスネークケースにマッピング
}

// ====================
// 予約状態を表す列挙型
// ====================
enum ReservationStatus {
  SCHEDULED   // 予約済み（未開始）
  IN_PROGRESS // 利用中  
  COMPLETED   // 完了
  CANCELLED   // キャンセル
}

// ====================
// 予約モデル
// ====================
model Reservation {
  id             String             @id @default(cuid()) // 予約ID（主キー）
  start_time     DateTime           // 予約開始時刻
  end_time       DateTime           // 予約終了時刻
  destination    String?            // 行き先（任意）
  status         ReservationStatus  @default(SCHEDULED) // 予約状態
  created_at     DateTime           @default(now()) // 作成日時
  updated_at     DateTime           @updatedAt      // 更新日時

  // 車両リレーション
  vehicle_id     String
  vehicle        Vehicle            @relation(fields: [vehicle_id], references: [id])

  // ユーザーリレーション
  user_id        String
  user           User               @relation(fields: [user_id], references: [id])

  // 実際の運転記録との連携（任意）
  driving_log_id String?            @unique
  driving_log    DrivingLog?        @relation(fields: [driving_log_id], references: [id])

  @@map("reservations")
}